import React, { useEffect, useState, useRef } from 'react';
import axios from 'axios';
import * as pdfmake from 'pdfmake/build/pdfmake';

import { FaFilePdf } from 'react-icons/fa';

import { logoSigobras, logoGRPuno, ImgDelta } from '../Complementos/ImgB64';
import { UrlServer } from '../../Utils/ServerUrlConfig';

import Highcharts from 'highcharts';
import HighchartsReact from 'highcharts-react-official';
// var request = require('request').defaults({ encoding: null });

import Backdrop from '@material-ui/core/Backdrop';
import CircularProgress from '@material-ui/core/CircularProgress';
// import Button from '@material-ui/core/Button';
import { makeStyles } from '@material-ui/core/styles';
import { toast } from 'react-toastify';
const { Redondea, mesesShort, meses } = require('../../Utils/Funciones');
require('highcharts/modules/exporting')(Highcharts);

function Reportcurvas() {
	function FechaLarga(fecha) {
		const fechaTemp = fecha.split('-');
		const ShortDate = new Date(fechaTemp[0], fechaTemp[1] - 1, [fechaTemp[2]]);
		const options = {
			year: 'numeric',
			month: 'long',
			day: 'numeric',
			weekday: 'long',
		};
		return ShortDate.toLocaleDateString('es-ES', options);
	}

	const [Loading, setLoading] = useState(false);
	const useStyles = makeStyles(theme => ({
		backdrop: {
			zIndex: theme.zIndex.drawer + 1,
			color: '#fff',
		},
	}));
	const classes = useStyles();

	useEffect(() => {}, []);

	function GenerateFechaPdf() {
		const n = new Date();
		// Año
		const y = n.getFullYear();
		// Mes
		const m = n.getMonth() + 1;
		// Día
		const d = n.getDate();

		// Lo ordenas a gusto.
		const date = d + '/' + m + '/' + y;
		return date;
	}
	async function ImagenToBase64(url) {
		const urlFinal = UrlServer + url;
		const image = await axios.get(urlFinal, {
			responseType: 'arraybuffer',
		});

		// raw[0] = Buffer.from(image.data, 'binary').toString('base64');
		const raw = Buffer.from(image.data).toString('base64');
		const imgb64 = 'data:' + image.headers['content-type'] + ';base64,' + raw;
		return imgb64;
		// console.log(imagenBase64);
	}

	// data curva s porcentaje
	async function solesToPorcentajeCurvaS(test) {
		const tempDataObra = await fetchDataObra();
		const cloneDataCurvaS = test.concat();
		cloneDataCurvaS.forEach(item => {
			item.programadomonto = redondeo(
				(item.programadomonto / tempDataObra.costodirecto) * 100,
				2,
			);
			item.ejecutadomonto = redondeo(
				(item.ejecutadomonto / tempDataObra.costodirecto) * 100,
				2,
			);
			item.financieromonto = redondeo(
				(item.financieromonto / tempDataObra.gtotalpresu) * 100,
				2,
			);
		});
		return cloneDataCurvaS;
	}

	function getMesfromDate(date) {
		date = date.split('-');
		return Number(date[1]);
	}
	function getAnyofromDate(date) {
		date = date.split('-');
		return Number(date[0]);
	}

	function redondeo(num) {
		return Math.round((num + Number.EPSILON) * 100) / 100;
	}

	// get costo diresto y presupuesto total
	async function fetchDataObra() {
		const request = await axios.post(`${UrlServer}/getDataObra`, {
			idficha: sessionStorage.getItem('idobra'),
		});
		setLoading(true);
		// console.log("request", request);

		return request.data;
	}

	// Obtenemos la data del ultimo deia de metrado
	async function fetchUltimoDiaMetrado() {
		const request = await axios.post(`${UrlServer}/getUltimoDiaMetrado`, {
			idficha: sessionStorage.getItem('idobra'),
		});
		// console.log("requestULtimo dia metrado", request.data);
		return request.data;
	}
	// async function test() {
	//   const request = await axios.post(`${UrlServer}/getFisicoComponente`, {
	//     "idcomponente": 1259
	//   })
	//   console.log("Data", request.data);
	//   return request.data
	// }

	// obenemos la data de los compomnetes
	async function fetchComponentes() {
		const request = await axios.post(`${UrlServer}/getComponentes`, {
			idficha: sessionStorage.getItem('idobra'),
		});
		// console.log("request get compomentes", request.data);
		const CompomentesRecibidos = request.data;

		// Obtenemos la data de los compomnetes fisicos
		for (let i = 0; i < CompomentesRecibidos.length; i++) {
			const element = CompomentesRecibidos[i];

			const request2 = await axios.post(`${UrlServer}/getFisicoComponente`, {
				idcomponente: element.idcomponente,
			});
			element.avance = request2.data.avance;
			// console.log("request Fisico Compomente", element.avance);
		}
		// console.log("Compomentes...", CompomentesRecibidos);
		return CompomentesRecibidos;
	}

	// Obteniendo imagenes de la base de datos

	async function ImagenesDB() {
		try {
			const request = await axios.post(`${UrlServer}/getImagenesCurvaS`, {
				idficha: sessionStorage.getItem('idobra'),
				cantidad: 8,
			});
			// console.log("request.dataaaa", request);
			return request.data;
		} catch (error) {
			setLoading(false);
			toast.error('❌ No hay imagenes registradas ');
			// alert("No hay imagenes registradas")
		}
	}

	async function createDataChartPorcentaje(dataCurvaS) {
		const tempDataObra = await fetchDataObra();
		const labels = [];
		const programado = [];
		const ejecutado = [];
		const financiero = [];

		let programadoacumulado = 0;
		let ejecutadoacumulado = 0;
		let financieroacumulado = 0;
		const today = new Date();
		const year = today.getFullYear();
		let Delta = 0;
		// console.log("Year",year);
		// console.log("month",month);
		let programadosaldo = 0;
		let ejecutadosaldo = 0;
		let financierosaldo = 0;
		dataCurvaS.forEach(item => {
			if (item.tipo === 'PERIODO') {
				//  console.log("MEs",item.fechainicial.substr(5,2));
				if (
					year === item.fechainicial.substr(0, 4) &&
					item.ejecutadomonto !== 0 &&
					item.ejecutadomonto !== null
				) {
					Delta = (item.ejecutadomonto / item.programadomonto) * 100;
					// && month === item.fechainicial.substr(5, 2)
				}
				const label =
					mesesShort[getMesfromDate(item.fechainicial) - 1] +
					' - ' +
					getAnyofromDate(item.fechainicial);
				labels.push(label);
				programadoacumulado += item.programadomonto;
				programado.push(
					redondeo((programadoacumulado / tempDataObra.costodirecto) * 100, 2),
				);

				ejecutadoacumulado += item.ejecutadomonto;
				ejecutado.push(
					redondeo((ejecutadoacumulado / tempDataObra.costodirecto) * 100, 2),
				);

				financieroacumulado += item.financieromonto;
				financiero.push(
					redondeo((financieroacumulado / tempDataObra.gtotalpresu) * 100, 2),
				);

				programadosaldo = tempDataObra.costodirecto - programadoacumulado;
				// console.log("programadosaldo",programadosaldo);
				ejecutadosaldo = tempDataObra.costodirecto - ejecutadoacumulado;
				// console.log("ejecutadosaldo",ejecutadosaldo);
				financierosaldo = tempDataObra.gtotalpresu - financieroacumulado;
				// console.log("financierosaldo",financierosaldo);
			}
		});
		// clean ejecutado
		let ejecutadomontobreak = true;
		let financieromontobreak = true;
		let programadomontobreak = true;
		for (let i = dataCurvaS.length - 1; i > 0; i--) {
			const item = dataCurvaS[i];
			if (
				ejecutadomontobreak &&
				(item.ejecutadomonto === 0 || item.ejecutadomonto === null)
			) {
				ejecutado.pop();
			} else {
				ejecutadomontobreak = false;
			}
			if (
				financieromontobreak &&
				(item.financieromonto === 0 || item.financieromonto === null)
			) {
				financiero.pop();
			} else {
				financieromontobreak = false;
			}
			if (
				programadomontobreak &&
				(item.programadomonto === 0 || item.programadomonto === null)
			) {
				programado.pop();
			} else {
				programadomontobreak = false;
			}
		}
		// console.log("Delta",Delta);
		return {
			programadoacumulado,
			ejecutadoacumulado,
			financieroacumulado,
			Delta,
			programadosaldo,
			ejecutadosaldo,
			financierosaldo,
			labels,
			datasets: [
				{
					name: 'PROGRAMADO',
					data: programado,
					// backgroundColor: "#0080ff",
					color: '#0080ff',
					// fill: false,
				},
				{
					name: 'EJECUTADO',
					data: ejecutado,
					// backgroundColor: "#fd7e14",
					color: '#fd7e14',
					// fill: false,
				},
				{
					name: 'FINANCIERO',
					data: financiero,
					// backgroundColor: "#ffc107",
					color: '#ffc107',
					// fill: false,
				},
			],
		};
	}

	async function Cabezera(fechainicial, fechafinal) {
		const request = await axios.post(`${UrlServer}/getInformeDataGeneral`, {
			idficha: sessionStorage.getItem('idobra'),
			fechainicial,
			fechafinal,
		});
		const res = await axios.post(`${UrlServer}/getFinanciero`, {
			idficha: sessionStorage.getItem('idobra'),
		});
		return {
			style: 'tableExample',
			// color: '#ff0707',
			layout: 'noBorders',
			table: {
				widths: [80, 'auto', 80, 'auto', 50, 'auto'],
				body: [
					[
						{
							text: 'OBRA',
							style: 'TableHeaderInforme',
							alignment: 'left',
						},
						{
							text: ': ' + request.data.gmeta,
							style: 'tableBodyInforme',
							alignment: 'left',
							colSpan: 5,
						},
						{},
						{},
						{},
						{},
					],

					[
						{
							text: 'MONTO DE LA OBRA',
							style: 'TableHeaderInforme',
							alignment: 'left',
						},
						{
							text: ': S/. ' + Redondea(request.data.presupuestogeneral),
							style: 'tableBodyInforme',
							alignment: 'left',
							// colSpan:3
						},
						{
							text: 'COSTO DIRECTO',
							style: 'TableHeaderInforme',
							alignment: 'left',
						},
						{
							text: ': S/. ' + request.data.costodirecto,
							style: 'tableBodyInforme',
							alignment: 'left',
						},
						{
							text: 'REGION',
							style: 'TableHeaderInforme',
							alignment: 'left',
						},
						{
							text: ': ' + request.data.region,
							style: 'tableBodyInforme',
							alignment: 'left',
						},
					],

					[
						{
							text: 'MES',
							style: 'TableHeaderInforme',
							alignment: 'left',
						},
						{
							text: ': ' + request.data.mes,
							style: 'tableBodyInforme',
							alignment: 'left',
						},
						{
							text: 'RESIDENTE DE OBRA',
							style: 'TableHeaderInforme',
							alignment: 'left',
						},
						{
							text: ': ' + request.data.residente,
							style: 'tableBodyInforme',
							alignment: 'left',
						},
						{
							text: 'PROVINCIA',
							style: 'TableHeaderInforme',
							alignment: 'left',
						},
						{
							text: ': ' + request.data.provincia,
							style: 'tableBodyInforme',
							alignment: 'left',
						},
					],

					[
						{
							text: 'PLAZO DE EJECUCION',
							style: 'TableHeaderInforme',
							alignment: 'left',
						},
						{
							text: ': ' + request.data.plazodeejecucion,
							style: 'tableBodyInforme',
							alignment: 'left',
						},
						{
							text: 'SUPERVISOR DE OBRA',
							style: 'TableHeaderInforme',
							alignment: 'left',
						},
						{
							text: ': ' + request.data.supervisor,
							style: 'tableBodyInforme',
							alignment: 'left',
						},
						{
							text: 'DISTRITO',
							style: 'TableHeaderInforme',
							alignment: 'left',
						},
						{
							text: ': ' + request.data.distrito,
							style: 'tableBodyInforme',
							alignment: 'left',
						},
					],

					[
						{
							text: 'AVANCE FISICO ACTUAL',
							style: 'TableHeaderInforme',
							alignment: 'left',
							// border: [false, false, true, true],
						},
						{
							text: ': ' + Redondea(request.data.porcentajeavancefisico) + ' %',
							style: 'tableBodyInforme',
							alignment: 'left',
						},
						{
							text: 'AVANCE FISICO ACUMULADO',
							style: 'TableHeaderInforme',
							alignment: 'left',
						},
						{
							text: ': ' + request.data.porcentajeavanceacumulado + ' %',
							style: 'tableBodyInforme',
							alignment: 'left',
						},
						{
							text: 'AVANCE FINANCIERO ACUMULADO',
							style: 'TableHeaderInforme',
							alignment: 'left',
						},
						{
							text: ': ' + Redondea(res.data.financieroavanceporcentaje) + '%',
							style: 'tableBodyInforme',
							alignment: 'left',
						},
					],
				],
			},
		};
	}

	async function getDataChart() {
		// console.log("getDataChart");
		const request = await axios.post(`${UrlServer}/getDataCurvaS`, {
			idficha: sessionStorage.getItem('idobra'),
		});
		// console.log("request.dataaaaaaaaaa", request.data);
		return request.data;
	}

	// HOOKS Declara una nueva variable de estado, la cual llamaremos “count”
	const [DataChart, setDataChart] = useState([]);
	const [DataChartCategories, setDataChartCategories] = useState([]);
	const chartRef = useRef(null);

	const options = {
		chart: {
			// type: 'area',
			// "backgroundColor": "#242526",
			style: {
				fontFamily: 'Roboto',
				color: '#666666',
			},
		},
		title: {
			text: 'CURVA S',
			align: 'center',
			style: {
				fontFamily: 'Roboto Condensed',
				fontWeight: 'bold',
				fontSize: '12px',
				color: '#666666',
			},
		},

		subtitle: {
			text: sessionStorage.getItem('codigoObra'),
			style: {
				// "fontFamily": "Roboto Condensed",
				// "fontWeight": "bold",
				fontSize: '12px',
				// "color": "#666666"
			},
		},
		legend: {
			// layout: 'vertical',
			align: 'center',
			verticalAlign: 'bottom',
		},
		tooltip: {
			split: true,
			valueSuffix: ' %',
		},
		xAxis: {
			categories: DataChartCategories,
			tickmarkPlacement: 'on',
			title: {
				enabled: false,
			},
		},
		yAxis: {
			title: {
				text: 'PORCENTAJES',
			},
			labels: {
				formatter: function () {
					return this.value / 1000;
				},
			},
			gridLineColor: '#424242',
			ridLineWidth: 1,
			minorGridLineColor: '#424242',
			inoGridLineWidth: 0.5,
			tickColor: '#424242',
			minorTickColor: '#424242',
			lineColor: '#424242',
		},
		plotOptions: {
			line: {
				dataLabels: {
					enabled: true,
					// color: 'white',
					style: {
						textOutline: false,
						fontSize: 7,
					},
				},
			},
		},
		series: DataChart,
	};
	async function generatePdf() {
		// var ImagenBase64 = await ImagenToBase64(ImagenPDF.current)
		// var ImagenBase642 = await ImagenToBase64(ImagenPDF2.current)
		// // console.log("ImagenBase64", ImagenBase64);
		// console.log("ImagenBase642", ImagenBase642);

		// conseguir informacion de la cabezera

		const date = new Date();
		const y = date.getFullYear();
		const m = date.getMonth();
		const firstDay = new Date(y, m, 1);
		const lastDay = new Date(y, m + 1, 0);

		const fechainicial = firstDay.toISOString().substr(0, 10);
		const fechafinal = lastDay.toISOString().substr(0, 10);
		const cabezera2 = await Cabezera(fechainicial, fechafinal);
		// console.log("cabezera2", cabezera2);

		// conseguir la data del CHART

		const dataChartTable = await getDataChart();
		// console.log("dataChart", dataChartTable);

		// Se genera la data del CHART

		const temp = await createDataChartPorcentaje(dataChartTable);
		// console.log("temp", temp);
		const dataChart = temp.datasets;
		const categories = temp.labels;

		setDataChart(dataChart);
		setDataChartCategories(categories);

		// Data procesada a porcentajes
		const dataChartTablePorcentajes = await solesToPorcentajeCurvaS(
			dataChartTable,
		);
		// console.log("dataChartTablePorcentajes", dataChartTablePorcentajes);

		const ListaTablas = [];
		let ListaTemporal = [];

		if (dataChartTablePorcentajes.length !== 0) {
			let AnyoActual = dataChartTablePorcentajes[0].fechainicial.substr(0, 4);

			for (let i = 0; i < dataChartTablePorcentajes.length; i++) {
				const element = dataChartTablePorcentajes[i];
				if (element.tipo === 'PERIODO') {
					// Aqui se cumple una condicion
					if (AnyoActual !== element.fechainicial.substr(0, 4)) {
						ListaTablas.push(ListaTemporal);
						ListaTemporal = [];
						ListaTemporal.push(element);
						AnyoActual = element.fechainicial.substr(0, 4);
					} else {
						ListaTemporal.push(element);
					}
				}
			}
			ListaTablas.push(ListaTemporal);
			// console.log("ListaTablas", ListaTablas);
		}

		const DatosCurvaTotal = [];

		for (let i = 0; i < ListaTablas.length; i++) {
			const Lista = ListaTablas[i];
			const widths = [34];
			const mesdata = [
				{
					text: 'MES',
					style: 'TableMontosInforme',
					alignment: 'center',
					fontSize: 5,
				},
			];
			const programado = [
				{ text: 'PROGRAMADO', color: '#17202A', fontSize: 5 },
			];
			const ejecutado = [{ text: 'EJECUTADO', color: '#17202A', fontSize: 5 }];
			const financiero = [
				{ text: 'FINANCIERO', color: '#17202A', fontSize: 5 },
			];

			for (let j = 0; j < Lista.length; j++) {
				const element = Lista[j];
				// console.log("element",element);
				widths.push(25);

				mesdata.push({
					text:
						mesesShort[getMesfromDate(element.fechainicial) - 1] +
						'-' +
						getAnyofromDate(element.fechainicial),
					style: 'TableMontosInforme',
					alignment: 'left',
					fontSize: 5,
					// tocItem: true,
					//  margin: [-20, 0, 0, 0]
				});
				programado.push({
					text: element.programadomonto + '%',
					color: '#17202A ',
					fontSize: 5,
					margin: [0, 0, 0, 0],
				});
				ejecutado.push({
					text: element.ejecutadomonto + '%',
					color: '#273746  ',
					fontSize: 5,
					margin: [0, 0, 0, 0],
				});
				financiero.push({
					text: element.financieromonto + '%',
					color: '#566573 ',
					fontSize: 5,
					margin: [0, 0, 0, 0],
				});
				// console.log("Lista",Lista);
			}
			// Inpresion de la data
			const today = new Date();
			const year = today.getFullYear();
			// console.log("Lista",Lista[0].fechainicial.substr(0, 4));
			if (
				year === Lista[0].fechainicial.substr(0, 4) ||
				year - 1 === Lista[0].fechainicial.substr(0, 4) ||
				year + 1 === Lista[0].fechainicial.substr(0, 4)
			) {
				// console.log("Año ingresado",Lista[0].fechainicial.substr(0, 4));
				DatosCurvaTotal.push({
					style: 'tableExample',
					margin: [0, 1, 0, 0],
					layout: 'lightHorizontalLines',
					table: {
						widths,
						body: [mesdata, programado, ejecutado, financiero],
					},
				});
			}
		}

		// console.log("DatosCurvaTotal", DatosCurvaTotal);

		// consigues el SVG del CHART generado

		// console.log("chartRef", chartRef);
		const svg = chartRef.current.chart.getSVG();

		// SE guarda el ultimo dia de metrado
		const UltimoDiaMetrado = await fetchUltimoDiaMetrado();
		// console.log("UltimoDiaMetrado",UltimoDiaMetrado);

		// Guardamos compomentes en  una variable temporal
		const ComponentesPdf = await fetchComponentes();
		// console.log("CompomentesPdf", ComponentesPdf);
		// console.log("CompomentesPdf.numero", ComponentesPdf[0].numero);

		// Se consigue el link de las imagenes
		const Imagenesenbase64 = await ImagenesDB();
		for (let i = 0; i < Imagenesenbase64.length; i++) {
			const element = Imagenesenbase64[i];
			Imagenesenbase64[i].ImagenB64 = await ImagenToBase64(element.imagen);
		}
		// console.log("Imagenesenbase64", Imagenesenbase64);

		// ---------------------------> Tabla Compomentes
		const body = [
			[
				{ text: 'N°', fontSize: 7, style: 'TableMontosInforme' },
				{ text: 'Componente', fontSize: 7, style: 'TableMontosInforme' },
				{ text: 'Presupuesto CD', fontSize: 7, style: 'TableMontosInforme' },
				{ text: 'Ejecucion Fisica', fontSize: 7, style: 'TableMontosInforme' },
				{ text: '% de avance', fontSize: 7, style: 'TableMontosInforme' },
			],
		];
		for (let i = 0; i < ComponentesPdf.length; i++) {
			body.push([
				{ text: ComponentesPdf[i].numero, fontSize: 6.5 },
				{ text: ComponentesPdf[i].nombre, fontSize: 6.5 },
				{ text: Redondea(ComponentesPdf[i].presupuesto), fontSize: 6.5 },
				{ text: Redondea(ComponentesPdf[i].avance), fontSize: 6.5 },
				{
					text:
						Redondea(
							(ComponentesPdf[i].avance / ComponentesPdf[i].presupuesto) * 100,
						) + ' %',
					fontSize: 6.5,
				},
			]);
		}

		const TablaCompomentes = [
			{
				style: 'tableExample',
				layout: 'lightHorizontalLines',
				pageBreak: 'after',
				table: {
					body,
				},
			},
		];

		// Imagenes
		// var imagenesParaPdf = ""
		// var DescripcionImagenesParaPdf = []
		// var DescripcionPartida = []
		// if (Imagenesenbase64.length) {
		//   // console.log("Procesando imagenes");
		//   DescripcionPartida = [
		//     {
		//       columns: [
		//         {
		//           text: Imagenesenbase64[0].item + '/ ' + Imagenesenbase64[0].partidadescripcion,
		//           // fit: [220, 220],
		//           // width: 250,
		//           // height: 160,
		//           // margin: [1, 0, 0, 0],
		//           alignment: "left",
		//           fontSize: 5.9,
		//         },
		//         Imagenesenbase64[1] &&
		//         {
		//           // alignment: 'right',
		//           text: Imagenesenbase64[1].item + '/ ' + Imagenesenbase64[1].partidadescripcion,
		//           // fit: [220, 220],
		//           // width: 250,
		//           // height: 160,
		//           margin: [8, 0, 0, 0],
		//           // alignment: "left",
		//           fontSize: 5.9,

		//         }
		//       ],
		//     },
		//   ]
		//   imagenesParaPdf = [

		//       columns: [
		//         {
		//           image: Imagenesenbase64[0].ImagenB64,
		//           // fit: [220, 220],
		//           width: 250,
		//           height: 150,
		//           margin: [1, 0, 0, 0],
		//           // alignment: "center",
		//         },
		//         Imagenesenbase64[1] &&
		//         {
		//           // alignment: 'right',
		//           image: Imagenesenbase64[1].ImagenB64,
		//           // fit: [220, 220],
		//           width: 250,
		//           height: 150,
		//           margin: [0, 0, -16, 0],
		//           alignment: "center",

		//         }
		//       ],
		//     },
		//   ]
		//   DescripcionImagenesParaPdf = [
		//     {
		//       style: 'tableExample',
		//       layout: 'noBorders',
		//       table: {
		//         widths: ['*', '*'],
		//         body: [
		//           [
		//             {
		//               text: Imagenesenbase64[0].descripcion,
		//               // noWrap: true,
		//               // margin: [0, -7, 0, 0], Con tabla
		//               margin: [0, -5, 0, 0],
		//               alignment: 'justify',
		//               fontSize: 5.9,
		//               colSpan: Imagenesenbase64[1] ? 1 : 2
		//             },
		//             Imagenesenbase64[1] &&
		//             {
		//               text: Imagenesenbase64[1].descripcion,
		//               // noWrap: true,
		//               // margin: [5, -7, 0, 0], Con tabla
		//               margin: [5, -5, 0, 0],
		//               alignment: 'justify',
		//               fontSize: 5.9,
		//             },
		//           ],
		//           [
		//             {
		//               text: Imagenesenbase64[0].fecha,
		//               // noWrap: true,
		//               // margin: [0, -5, 0, 0], COn tabla
		//               margin: [0, -5, 0, 0],
		//               alignment: 'justify',
		//               fontSize: 5.9,
		//               colSpan: Imagenesenbase64[1] ? 1 : 2
		//             },
		//             Imagenesenbase64[1] &&
		//             {
		//               text: Imagenesenbase64[1].fecha,
		//               // noWrap: true,
		//               // margin: [5, -5, 0, 0], COn tabla
		//               margin: [5, -5, 0, 0],
		//               alignment: 'justify',
		//               fontSize: 5.9,
		//               pageBreak: 'after',
		//             },
		//           ],
		//         ]
		//       }
		//     },
		//   ]
		// }

		const body2 = [
			Imagenesenbase64.length > 2 && [
				{
					text: 'PANEL FOTOGRAFICO DEL AVANCE DE OBRA',
					border: [false, false, false, false],
					colSpan: 3,
					alignment: 'center',
					margin: [0, 0, 0, 0],
				},
				{},
				{},
			],
		];
		for (let i = 2; i < Imagenesenbase64.length; i += 2) {
			const element = Imagenesenbase64[i];
			const element2 = Imagenesenbase64[i + 1];
			body.push([
				{
					image: element.ImagenB64,
					// noWrap: true,
					// margin: [0, -7, 0, 0], Con tabla
					margin: [0, 0, 0, 0],
					alignment: 'justify',
					// fit: [250, 160],
					width: 250,
					height: 180,
				},
				{
					text: '',
					border: [true, false, !!element2, false],
					// margin: [5,0,-15,0],
				},
				element2
					? {
							// image: Imagenesenbase64[1].imgb64,
							image: element2.ImagenB64,
							// noWrap: true,
							// margin: [5, -7, 0, 0], Con tabla
							margin: [5, 0, 0, 0],
							alignment: 'justify',
							// fit: [250, 160],
							width: 250,
							height: 180,
					  }
					: {
							text: '',
							border: [false, false, false, false],
					  },
			]);
			body2.push([
				{
					text:
						element.item +
						' - ' +
						element.partidadescripcion +
						' DESC: ' +
						element.descripcion +
						' ' +
						element.fecha,
					alignment: 'justify',
					fontSize: 6.5,
				},
				{
					text: '',
					border: [true, false, !!element2, false],
					// margin: [5,0,-15,0],
				},
				element2
					? {
							text:
								element2.item +
								' - ' +
								element2.partidadescripcion +
								' DESC: ' +
								element2.descripcion +
								' ' +
								element2.fecha,
							alignment: 'justify',
							fontSize: 6.5,
					  }
					: {
							text: '',
							border: [false, false, false, false],
					  },
			]);
			body2.push([
				{
					text: ' ',
					colSpan: 3,
					border: [false, false, false, false],
					margin: [0, -10, 0, -10],
				},
				{},
				{},
			]);
		}
		const SegundoEsquemaImagenes = [
			{
				style: 'tableExample',
				// layout: 'noBorders',
				pageMargins: [0, 0, 0, 0],

				table: {
					widths: ['*', 'auto', '*'],
					body,
				},
			},
		];
		// console.log("Imagenesenbase64", Imagenesenbase64);

		// Aqui se genera el PDF

		const dd = {
			header: {
				columns: [
					{
						image: logoGRPuno,
						fit: [280, 280],
						margin: [45, 4, 10, 0],
					},
					{
						alignment: 'right',
						image: logoSigobras,
						width: 48,
						height: 30,
						margin: [20, 4, 10, 0],
					},
				],
			},

			footer: {
				text: 'fecha de reporte : ' + GenerateFechaPdf(),
				alignment: 'right',
				italics: true,
				margin: [20, 10, 10, 0],
				fontSize: 6.5,
			},
			content: [
				cabezera2,
				{
					margin: [0, -28, 0, -15],
					table: {
						widths: ['*'],
						body: [[' '], [' ']],
					},
					layout: {
						hLineWidth: function (i, node) {
							return i === 0 || i === node.table.body.length ? 0 : 1;
						},
						vLineWidth: function () {
							return 0;
						},
					},
				},
				{
					svg,
					// width: 550,
					// height: 350,
					fit: [558, 333],
					alignment: 'center',
				},
				// Ejecutado / Programado *100
				{
					style: 'tableExample',
					// layout: 'noBorders',
					italics: true,
					margin: [0, -10, 0, 10],
					table: {
						body: [
							[
								{
									text:
										'S/.' +
										Redondea(temp.programadoacumulado) +
										'\nPROGRAMADO ACUMULADO',
									alignment: 'center',
									fontSize: 5,
									// margin: [0, 0, 0, -10],
								},
								{
									text:
										'S/.' +
										Redondea(temp.ejecutadoacumulado) +
										'\nEJECUTADO ACUMULADO',
									alignment: 'center',
									fontSize: 5,
									// margin: [0, 0, 0, -10],
								},
								{
									text:
										'S/.' +
										Redondea(temp.financieroacumulado) +
										'\nFINANCIERO ACUMULADO',
									alignment: 'center',
									fontSize: 5,
									// margin: [0, 0, 0, -10],
								},
								{
									image: ImgDelta,
									width: 15,
									height: 15,
									alignment: 'center',
									// margin: [0, -10, 0, 0],
									border: [false, false, false, false],
								},
								{
									text: ' = ' + Redondea(temp.Delta) + '%',
									alignment: 'justify',
									rowSpan: 2,
									border: [false, false, false, false],
								},
								{
									text: 'UDM: ' + FechaLarga(UltimoDiaMetrado.fecha),
									rowSpan: 2,
									border: [false, false, false, false],
									fontSize: 8,
									alignment: 'center',
								},
							],
							[
								{
									text:
										'S/.' +
										Redondea(temp.programadosaldo) +
										'\nPROGRAMADO SALDO',
									fontSize: 5,
									alignment: 'center',
									// margin: [0, -10, 0, 0],
								},
								{
									text:
										'S/.' + Redondea(temp.ejecutadosaldo) + '\nEJECUTADO SALDO',
									fontSize: 5,
									alignment: 'center',
								},
								{
									text:
										'S/.' +
										Redondea(temp.financierosaldo) +
										'\nFINANCIERO SALDO',
									fontSize: 5,
									alignment: 'center',
								},
								{
									text: meses[new Date().getMonth() - 1],
									alignment: 'center',
									// margin: [0, -8, 0, -1],
									fontSize: 9,
									border: [false, false, false, false],
								},
								{
									text: '',
								},
								{
									text: '',
								},
							],
						],
					},
				},
				{
					margin: [0, -28, 0, -18],
					table: {
						widths: ['*'],
						body: [[' '], [' ']],
					},
					layout: {
						hLineWidth: function (i, node) {
							return i === 0 || i === node.table.body.length ? 0 : 1;
						},
						vLineWidth: function () {
							return 0;
						},
					},
				},
			].concat(
				DatosCurvaTotal,
				{
					margin: [0, -17, 0, -16],
					table: {
						widths: ['*'],
						body: [[' '], [' ']],
					},
					layout: {
						hLineWidth: function (i, node) {
							return i === 0 || i === node.table.body.length ? 0 : 1;
						},
						vLineWidth: function () {
							return 0;
						},
					},
				},
				// , Imagenesenbase64 ? DescripcionPartida : " "
				// , Imagenesenbase64 ? imagenesParaPdf : " "
				// , Imagenesenbase64 ? DescripcionImagenesParaPdf : " "
				TablaCompomentes,
				SegundoEsquemaImagenes,
			),

			styles: {
				header: {
					fontSize: 7,
					bold: true,
					margin: [0, 0, 0, 5],
				},
				subheader: {
					fontSize: 10,
					bold: true,
					margin: [0, 10, 0, 5],
				},
				tableExample: {
					margin: [0, 5, 0, 10],
				},
				tableHeader: {
					bold: true,
					fontSize: 8.5,
					color: '#000000',
					fillColor: '#8baedb',
				},
				tableFecha: {
					bold: true,
					fontSize: 9,
					color: '#000000',
					fillColor: '#edf1f4',
				},
				tableBody: {
					// bold: true,
					fontSize: 6,
					color: '#000000',
					// fillColor: '#f6f6ff',
				},
				TableHeaderInforme: {
					bold: true,
					fontSize: 7,
					color: '#000000',
					margin: [0, 0, 0, 0],
					// fillColor: '#ffcf96',
				},
				TableMontosInforme: {
					bold: true,
					fontSize: 9,
					color: '#FFFFFF',
					fillColor: '#3a68af',
				},
				tableBodyInforme: {
					fontSize: 7,
					color: '#000000',
				},
				tableFechaContent: {
					bold: true,
					fontSize: 10,
					color: '#000000',
					fillColor: '#8baedb',
				},
			},

			pageSize: 'A4',
			// pageOrientation: 'portrait'
			// pageOrientation: 'landscape',
		};

		const pdfDocGenerator = await pdfmake.createPdf(dd);
		const win = window.open('', 'blank');
		pdfDocGenerator.open({}, win);
		// (pdfDocGenerator as any).open({}, win);
		// pdfDocGenerator.open()
		setLoading(false);
	}

	return (
		<div>
			{/* <Container> */}
			<li className='lii'>
				<div
					className='d-flex'
					style={{
						alignItems: 'center',
					}}
				>
					<a href='#' onClick={() => generatePdf()}>
						<FaFilePdf className='text-danger' /> Curva S ✔
					</a>
					{Loading && (
						<Backdrop className={classes.backdrop} open>
							<CircularProgress color='inherit' />
						</Backdrop>
					)}
				</div>
			</li>
			{/* </Container> */}

			<div style={{ display: 'none' }}>
				<HighchartsReact
					highcharts={Highcharts}
					options={options}
					ref={chartRef}
				/>
			</div>
		</div>
	);
}

export default Reportcurvas;
